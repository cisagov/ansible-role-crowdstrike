---
- name: Load var file with package names based on the OS type
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}_{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      paths:
        - "{{ role_path }}/vars"

# Check if CrowdStrike Falcon sensor is already installed
- name: Check if the CrowdStrike Falcon sensor is already installed
  ansible.builtin.stat:
    path: "{{ install_directory }}"
  register: falcon_directory

- name: Install the CrowdStrike Falcon sensor
  block:
    - name: Grab the CrowdStrike Falcon sensor system package from S3
      amazon.aws.aws_s3:
        bucket: "{{ third_party_bucket_name }}"
        object: "{{ package_object_name }}"
        dest: /tmp/{{ package_object_name }}
        mode: get
      become: no
      delegate_to: localhost

    - name: Copy the CrowdStrike Falcon sensor system package
      ansible.builtin.copy:
        dest: /tmp/{{ package_object_name }}
        mode: 0700
        src: /tmp/{{ package_object_name }}

    - name: Load tasks file based on the OS type
      ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - "{{ ansible_distribution }}_{{ ansible_distribution_release }}.yml"
            - "{{ ansible_distribution }}.yml"
            - "{{ ansible_os_family }}.yml"
          paths:
            - "{{ role_path }}/tasks"

    - name: Enable the CrowdStrike Falcon sensor service
      ansible.builtin.service:
        enabled: yes
        name: falcon-sensor
        # Required to set the update_hostname option below
        # state: started

    # - name: Configure the CrowdStrike Falcon sensor to send hostname updates
    #   ansible.builtin.command:
    #     argv:
    #       - "{{ install_directory }}/sbin/nessuscli"
    #       - fix
    #       - --set
    #       - update_hostname=yes
    #   changed_when: nessuscli_output.rc == 0
    #   failed_when: nessuscli_output.rc != 0
    #   register: nessuscli_output

    - name: Delete local copy of the CrowdStrike Falcon sensor system package
      ansible.builtin.file:
        path: /tmp/{{ package_object_name }}
        state: absent
      become: no
      delegate_to: localhost

    - name: Delete remote copy of the CrowdStrike Falcon sensor system package
      ansible.builtin.file:
        path: /tmp/{{ package_object_name }}
        state: absent

  when: not falcon_directory.stat.exists
